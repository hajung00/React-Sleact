2023-08-16
1. Node.js와 npm
Node.js: Chrome V8 JavaScript 엔진으로 빌드된 JavaScript 런타임(실행 환경)
자바스크립트를 브라우저 말고도 로컬 PC에서도 실행시켜줄 수 있는 실행창(런타임)입니다.

npm(NodeNode Package Manager): Node.js 환경에서 여러 모듈들을 패키지화하여 관리하는 저장소 같은 역할
[1] npm init: Node.js 프로젝트를 시작할때 package.json을 생성해 주는 명령
* node_modules: 설치한 패키지들의 실제 소스 코드가 담겨있는 폴더.

* package.json: 프로젝트의 정보와 특히 프로젝트가 의존하고 있는(설치한) 패키지(모듈)에 대한 정보가 저장되어 있는 파일.
- package.jon 용어
----------------------------------------------------------------
* dependencies: 해당 프로그램이 실행되기 위해 반드시 필요한 모듈 목록
* devDependencies: 해당 프로그램을 개발하는 환경에서 필요한 모듈 목록
* script: npm으로 실행할 수 있는 명령어
----------------------------------------------------------------

* package-lock.json: 사용하고 있는 모든 패키지들의 정확한 버전정보를 추적하여 단 하나의 의존성 트리를 만들 수 있고,
동일한 package.json과 package-lock.json을 이용하는 모든 개발자들이 동일한 버전의 패키지를 기반으로 개발 가능


2. TypeScript
TypeScript: 자바스크립트의 단점을 보완하기 위해 만들어진 정적 타입 언어

TypeScript 필요성
1) 에러의 사전 방지
2) 코드 가이드 및 자동 완성(개발 생산성 향상)

TypeScript -> JavaScript 변환 과정
1) TypeScript가 변환해 주는 것 그대로 사용
2) TypeScript가 변환 후 바벨이 다시 JavaScript로 변환 => 주로 사용!

* babel이 css, html, 이미지 파일을 모두 JavaScript로 변환해 줄 수 있기 때문!


3. Babel과 Webpack
Babel: JavaScript 컴파일러

* 컴파일러 언어: 코드가 실행되기 전 단계인 컴파일 타임에 소스코드 전체를 한번에 머신 코드로 변환한 후 실행한다.
ex) c, c++
* 인터프리터 언어: 코드가 실행되는 단계인 런타임에 문 단위로 한 줄씩 중간 코드인 바이트 코드로 변환한 후 실행한다.
ex) JavaScript

자바스크립트는 인터프리터 언어인데 왜 컴파일러가 필요할까?

정확히는 babel은 javascript로 결과물을 만들어주는 컴파일러입니다. 소스 대 소스 컴파일러 (transpiler)
라고 불립니다.

?? 왜 변환하는 과정이 필요한가 ??
- 모든 브라우저가 최신 문법, 기술(ES6) 을 지원하지 않기 때문에 구 기능(ES5)으로 변환하는 작업이 필요!

* Babel 역할
----------------------------------------------------------------
1) Transform syntax (구문 변환): 최신의 자바스크립트 문법을 오래된 브라우저가 이해할 수 있도록 오래된 문법으로 변환해 준다.
2) babel-polyfill을 통해서 폴리필 기능을 지원: 폴리필은 오래된 브라우저에 네이티브로 지원하지 않는 사용자가 사용하는 메서드, 속성, API가 존재하지 않을 때 추가해 준다.
3) JSX 문법을 변환
----------------------------------------------------------------

Webpack: 번들링과 컴파일을 결합하는 정적 모듈 번들러
쉽게 말하면, 필요한 다수의 자바스크립트 파일을 하나의 자바 스크립트 파일로 만들어 주는 것을 Webpack 이라고 한다.

Webpack 필요성
1) SPA 하나의 html 페이지에 여러개의 자바스크립트 파일들이 포함한다. 연관 되어 있는 자바스크립트 종송석 있는 파일들을 하나의 파일로 묶어줘서 관리하기 편하다.
2) 파일을 컴파일 할 때, 여러 모듈들의 파일을 읽어오는데 시간이 오래 걸린다. 그 부분을 해결하기 위해 여러 파일을 하나의 파일로 번들링 해준다.
3) 하나의 자바스크립트 파일로 만들어서 웹페이지 성능 최적화 해준다.

Webpack 구조
----------------------------------------------------------------
* path : 파일의 경로를 다루고 변경하는 유틸리티
* output : build 결과를 저장할 경로
* entry : build의 대상이 될 파일
* Plug-In : build 된 bundle 파일을 동적으로 특정 html 페이지에 추가 할 수 있으며 build 시에 javscript, css, html 등의 파일을 난독화 및 압축을 진행할 수 있다.
----------------------------------------------------------------

2023-08-22
Webpack 설정 후 실행
- webpack은 ts를 인식 못하기 때문에 tsconfig에서 추가 설정 필요
- ts-node 라이브러리를 통해 webpack이 ts실행
 "ts-node": {
    "compilerOptions": {
      "module": "commonjs",
      "moduleResolution": "Node",
      "target": "es5",
      "esModuleInterop": true
    }
  }
- 실행 명령어: npx webpack

4. 핫 리로딩(hot reloading)
- 앱을 처음부터 다시 시작하지 않고 새로운 코드 변경에 따른 코드 변경사항만 표시하며 변경된 코드에만 적용된다. 
- webpack의 핫 모듈을 통해서 핫 리로더 설정을 해서 사용

* webpack-dev-server 사용
- webpack-dev-server는 나중에 proxy서버 역할도 해줘서 CORS에러 해결도 해줌.
npm i webpack-cli
npm i -D @types/webpack-dev-server
npm i @pmmm/react-refresh-webpack-plugin

5. 코드 스플리팅(code splitting)
- 코드에서 당장 사용하는 부분만을 로딩하고, 현재 필요하지 않은 코드 부분은 따로 분리시켜 나중에 로드함으로써 로딩시간을 개선하는 것

코드 분리 기준
- 페이지 단위
- 서버 사이드 렌더링이 필요하지 않는 것

* loadable__component 사용
npm i @types/loadable__component

* 사용 예시
----------------------------------------------------------------
사용 전: import LogIn from '파일 경로'
사용 후: const LogIn = loadable(()=> import('파일 경로'))
----------------------------------------------------------------

2023-09-04
6. CORS
CORS(Cross Origin Resource Sharing):  웹 어플리케이션에서 다른 도메인의 리소스에 접근할 때 발생하는 보안 이슈를 해결하기 위한 표준 방법

- 해결 방법
1. 백앤드: 서버에서 Access-Control-Allow-Origin 헤더에 허용할 출처를 기재해서 클라이언트에 응답하면 되는 것
[back/app.js] 
 app.use(
   cors({
     origin: true,
     credentials: true,
     webSocket: true,
   })
 );
2. 프론트: api로 보내는 요청은 주소를 3095인 것처럼 해서 보낸다.
[client/webpack.config] 
 proxy:{
      '/api/':{
        target:'http://localhost:3095',
        changeOrigin:true,
      }
    }
* webpack수정 후에 서버 재시작
참고 자료: (https://inpa.tistory.com/entry/WEB-%F0%9F%93%9A-CORS-%F0%9F%92%AF-%EC%A0%95%EB%A6%AC-%ED%95%B4%EA%B2%B0-%EB%B0%A9%EB%B2%95-%F0%9F%91%8F)
